<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.8.1 on win32)" generated="20200720 11:50:16.429" rpa="false">
<suite id="s1" name="Mind Dump" source="C:\RobotFramework\PyCharm\SAANA\Reissue\mind_dump.robot">
<test id="s1-t1" name="Midbatch">
<kw name="Test setup" library="Set_Teardown" type="setup">
<arguments>
<arg>${environment name}</arg>
</arguments>
<kw name="Set environment2" library="Environments1">
<arguments>
<arg>${environment name}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>&amp;{environment}</arg>
<arg>owner=</arg>
<arg>appprefix=</arg>
<arg>jobprefix=</arg>
<arg>datasetprefix=</arg>
<arg>cicsk=</arg>
<arg>companynumber=</arg>
<arg>pool=</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${environment name}'=='RLSES'</arg>
<arg>Set RLSES</arg>
</arguments>
<kw name="Set RLSES" library="Environments1">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${environment}</arg>
<arg>owner=RLSES</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${environment}</arg>
<arg>appprefix=SAN</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${environment}</arg>
<arg>jobprefix=SAN</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${environment}</arg>
<arg>datasetprefix=OPBK.rlse.icr</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${environment}</arg>
<arg>cicsk=CK35</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${environment}</arg>
<arg>companynumber=20000</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${environment}</arg>
<arg>pool=01</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${environment name}'=='CK0A'</arg>
<arg>Set CK0A</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.429"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:17.445"></status>
</kw>
<kw name="Connect to mainframe" library="SharedKeywordsSAN">
<kw name="Connect" library="py3270lib">
<doc>Connect to a host</doc>
<arguments>
<arg>Y:192.168.14.6:2399</arg>
</arguments>
<msg timestamp="20200720 11:50:18.460" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20200720 11:50:20.507" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20200720 11:50:22.523" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20200720 11:50:24.539" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20200720 11:50:26.556" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<status status="PASS" starttime="20200720 11:50:17.445" endtime="20200720 11:50:28.072"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 seconds</arg>
</arguments>
<msg timestamp="20200720 11:50:30.074" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20200720 11:50:28.072" endtime="20200720 11:50:30.074"></status>
</kw>
<kw name="Credential Getter" library="user_password">
<arguments>
<arg>Cams user</arg>
</arguments>
<assign>
<var>${Cams user}</var>
</assign>
<msg timestamp="20200720 11:50:30.074" level="INFO">${Cams user} = &lt;user_password.user_password.credential_getter.&lt;locals&gt;._cred_getter object at 0x00000271F60EC370&gt;</msg>
<status status="PASS" starttime="20200720 11:50:30.074" endtime="20200720 11:50:30.074"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Userid:</arg>
<arg>${Cams user.user}</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:30.074" endtime="20200720 11:50:30.293"></status>
</kw>
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>None</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:30.293" endtime="20200720 11:50:30.293"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Password:</arg>
<arg>${Cams user.password}</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:30.293" endtime="20200720 11:50:30.730"></status>
</kw>
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>Info</arg>
</arguments>
<msg timestamp="20200720 11:50:30.730" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" starttime="20200720 11:50:30.730" endtime="20200720 11:50:30.730"></status>
</kw>
<kw name="String Found" library="py3270lib">
<doc>String Found verifies the the specified string (exactly) is found at the specified location.</doc>
<arguments>
<arg>12</arg>
<arg>25</arg>
<arg>P A Y M E N T \ \ S E R V I C E S \ \ F O R \ \ E U R O P E</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:30.730" endtime="20200720 11:50:30.730"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:30.730" endtime="20200720 11:50:31.152"></status>
</kw>
<kw name="Wait For Field" library="py3270lib">
<doc>Wait until the screen is ready, the cursor has been positioned
on a modifiable field, and the keyboard is unlocked.
Sometimes the server will "unlock" the keyboard but the screen will
not yet be ready.  In that case, an attempt to read or write to the
screen will result in a 'E' keyboard status because we tried to
read from a screen that is not yet ready.
Using this method tells the client to wait until a field is
detected and the cursor has been positioned on it.</doc>
<status status="PASS" starttime="20200720 11:50:31.152" endtime="20200720 11:50:31.152"></status>
</kw>
<kw name="Log Screen" library="py3270lib">
<doc>Log Screen adds an image of the current screen from the terminal emulator to the Robot
Framework test log.</doc>
<msg timestamp="20200720 11:50:31.152" level="INFO" html="yes">&lt;html&gt;
&lt;head&gt;
 &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;/head&gt;
 &lt;body&gt;
  &lt;table border=0&gt;&lt;tr bgcolor=black&gt;&lt;td&gt;&lt;pre&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt;                  &lt;/span&gt;&lt;span style="color:white;background:black;font-weight:normal;font-style:normal"&gt; MENU TUBES PER    EQTAUT5                &lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt; Panelid  - MIOMENU 
&lt;/span&gt;&lt;span style="color:red;background:black;font-weight:bold;font-style:normal"&gt; TII4012I Signon complete for EQTAUT5 IP address 192.168.50.130 PORT 62644      
&lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt;                                                             Terminal - TCPADMFG
 Menu=PF23         Jump=PF24         Help=PF1                Model    - 3278-4E 
 Fwd=PF8           Bwd=PF7                                   System   - PRDA    
                                                                                
    &lt;/span&gt;&lt;span style="color:white;background:black;font-weight:normal;font-style:normal"&gt; Sessid&lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt;     &lt;/span&gt;&lt;span style="color:white;background:black;font-weight:normal;font-style:normal"&gt; Sesskey&lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt;    &lt;/span&gt;&lt;span style="color:white;background:black;font-weight:normal;font-style:normal"&gt; Descrizione Sessione&lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt;           &lt;/span&gt;&lt;span style="color:white;background:black;font-weight:normal;font-style:normal"&gt; Stato&lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt;              
                                                                                
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; S5TSO       PF          EGKT------TSO ON DEV                               
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; TST         PF          TSO - TST1                                         
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; SART        PF          SAR - TST1                                         
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; SAREGKT     PF          SAR - EGKT                                         
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; CK0A        PF          EGKT - NEW CICS A progetto SAAN                    
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; CK23A       PF          EGKT-CICSK23-COL1(CAMS) A                          
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; CK23B       PF          EGKT-CICSK23-COL1(CAMS) B                          
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; CK25        PF          EGKT------QUALITY ASSURANCE                        
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; CK0B        PF          EGKT - NEW CICS B progetto SAAN                    
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; GROT        PF          GEN. RES. BLT/? TOR SAANA EGKT                     
  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:bold;font-style:normal"&gt;  &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; CK35        PF          EGKT-CICSK35-(TEST RLSE)                           
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
&lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt;                                                                                
&lt;/span&gt;&lt;span style="color:white;background:black;font-weight:normal;font-style:normal"&gt; Comando ===&amp;gt;&lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt; &lt;/span&gt;&lt;span style="color:black;background:red;font-weight:normal;font-style:normal"&gt; &lt;/span&gt;&lt;span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"&gt;                                                                &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt; 
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;/table&gt;
 &lt;/body&gt;
&lt;/html&gt;
</msg>
<status status="PASS" starttime="20200720 11:50:31.152" endtime="20200720 11:50:31.152"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:17.445" endtime="20200720 11:50:31.152"></status>
</kw>
<kw name="Log out of TSO session" library="SharedKeywordsSAN">
<doc>Logs out of TSO session using *S5TSO* `Sessid`</doc>
<kw name="Send Pf" library="py3270lib">
<arguments>
<arg>24</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:31.152" endtime="20200720 11:50:31.152"></status>
</kw>
<kw name="Send Pf7" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:31.152" endtime="20200720 11:50:31.168"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Comando ===&gt;</arg>
<arg>FIND S5TSO</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:31.168" endtime="20200720 11:50:33.796"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:33.796" endtime="20200720 11:50:34.218"></status>
</kw>
<kw name="Find Field" library="py3270lib">
<doc>:returns:  tuple consisting of row, column</doc>
<arguments>
<arg>S5TSO</arg>
<arg>RIGHT</arg>
</arguments>
<msg timestamp="20200720 11:50:34.546" level="INFO">to_right_end=80</msg>
<status status="PASS" starttime="20200720 11:50:34.218" endtime="20200720 11:50:34.655"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>i</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:34.655" endtime="20200720 11:50:34.655"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:34.655" endtime="20200720 11:50:35.077"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:50:36.093" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:50:35.077" endtime="20200720 11:50:36.093"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:31.152" endtime="20200720 11:50:36.093"></status>
</kw>
<kw name="Log out of CICSK session" library="SharedKeywordsSAN">
<kw name="Send Pf" library="py3270lib">
<arguments>
<arg>24</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:36.093" endtime="20200720 11:50:36.093"></status>
</kw>
<kw name="Send Pf7" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:36.093" endtime="20200720 11:50:36.093"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Comando ===&gt;</arg>
<arg>FIND &amp;{environment}[cicsk]</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:36.093" endtime="20200720 11:50:38.718"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:38.718" endtime="20200720 11:50:39.140"></status>
</kw>
<kw name="Find Field" library="py3270lib">
<doc>:returns:  tuple consisting of row, column</doc>
<arguments>
<arg>&amp;{environment}[cicsk]</arg>
<arg>RIGHT</arg>
</arguments>
<msg timestamp="20200720 11:50:39.468" level="INFO">to_right_end=80</msg>
<status status="PASS" starttime="20200720 11:50:39.140" endtime="20200720 11:50:39.577"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>i</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:39.577" endtime="20200720 11:50:39.577"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:39.577" endtime="20200720 11:50:39.989"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:50:40.989" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:50:39.989" endtime="20200720 11:50:40.989"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:36.093" endtime="20200720 11:50:40.989"></status>
</kw>
<kw name="Set UDFL" library="SharedKeywordsSAN">
<kw name="Go to CICSK updated" library="SharedKeywordsSAN">
<doc>Goes into cicks, handles logging in, uses keyword 'Log into CICKS'</doc>
<kw name="Select menu Option" library="SharedKeywordsSAN">
<doc>Selects given *${Option}* from main menu screen.</doc>
<arguments>
<arg>&amp;{environment}[cicsk]</arg>
</arguments>
<kw name="Send Pf" library="py3270lib">
<arguments>
<arg>24</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:40.989" endtime="20200720 11:50:40.989"></status>
</kw>
<kw name="Send Pf7" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:40.989" endtime="20200720 11:50:40.989"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Comando ===&gt;</arg>
<arg>FIND ${Option}</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:40.989" endtime="20200720 11:50:43.614"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:43.614" endtime="20200720 11:50:44.036"></status>
</kw>
<kw name="Find Field" library="py3270lib">
<doc>:returns:  tuple consisting of row, column</doc>
<arguments>
<arg>${Option}</arg>
<arg>RIGHT</arg>
</arguments>
<msg timestamp="20200720 11:50:44.364" level="INFO">to_right_end=80</msg>
<status status="PASS" starttime="20200720 11:50:44.036" endtime="20200720 11:50:44.474"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>S</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:44.474" endtime="20200720 11:50:44.474"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:44.474" endtime="20200720 11:50:44.911"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 seconds</arg>
</arguments>
<msg timestamp="20200720 11:50:46.912" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20200720 11:50:44.911" endtime="20200720 11:50:46.912"></status>
</kw>
<kw name="Log Screen" library="py3270lib">
<doc>Log Screen adds an image of the current screen from the terminal emulator to the Robot
Framework test log.</doc>
<msg timestamp="20200720 11:50:46.912" level="INFO" html="yes">&lt;html&gt;
&lt;head&gt;
 &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;/head&gt;
 &lt;body&gt;
  &lt;table border=0&gt;&lt;tr bgcolor=black&gt;&lt;td&gt;&lt;pre&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt;&lt;/span&gt;&lt;span style="color:black;background:red;font-weight:normal;font-style:normal"&gt; &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt;                                                                               
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;/table&gt;
 &lt;/body&gt;
&lt;/html&gt;
</msg>
<status status="PASS" starttime="20200720 11:50:46.912" endtime="20200720 11:50:46.912"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:40.989" endtime="20200720 11:50:46.912"></status>
</kw>
<kw name="Credential Getter" library="user_password">
<arguments>
<arg>Cams user</arg>
</arguments>
<assign>
<var>${Cams user}</var>
</assign>
<msg timestamp="20200720 11:50:46.912" level="INFO">${Cams user} = &lt;user_password.user_password.credential_getter.&lt;locals&gt;._cred_getter object at 0x00000271F60EC820&gt;</msg>
<status status="PASS" starttime="20200720 11:50:46.912" endtime="20200720 11:50:46.912"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:50:47.912" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:50:46.912" endtime="20200720 11:50:47.912"></status>
</kw>
<kw name="String Get" library="py3270lib">
<doc>String Get accepts the ypos and xpos of the string to retrieve.  Optionally, a fixed length 
may be specified or a termination string may be specified.  The default terminator is 2 spaces.
When a terminator is used, String Get will return all characters up until the terminator.</doc>
<arguments>
<arg>1</arg>
<arg>31</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${SingON}</var>
</assign>
<msg timestamp="20200720 11:50:47.912" level="INFO">${SingON} =             </msg>
<status status="PASS" starttime="20200720 11:50:47.912" endtime="20200720 11:50:47.912"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${SingON}</arg>
</arguments>
<msg timestamp="20200720 11:50:47.912" level="INFO">${SingON} =             </msg>
<status status="PASS" starttime="20200720 11:50:47.912" endtime="20200720 11:50:47.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SingON}' != 'CICS Sign On'</arg>
<arg>send clear</arg>
<arg>ELSE</arg>
<arg>Log into CICKS</arg>
</arguments>
<kw name="Send Clear" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:47.912" endtime="20200720 11:50:47.912"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:47.912" endtime="20200720 11:50:47.912"></status>
</kw>
<kw name="XCSR" library="SharedKeywordsSAN">
<kw name="Send Clear" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:47.912" endtime="20200720 11:50:47.912"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>xcsr</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:47.912" endtime="20200720 11:50:47.912"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:47.912" endtime="20200720 11:50:48.366"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:47.912" endtime="20200720 11:50:48.366"></status>
</kw>
<kw name="String Found" library="py3270lib">
<doc>String Found verifies the the specified string (exactly) is found at the specified location.</doc>
<arguments>
<arg>3</arg>
<arg>1</arg>
<arg>MAIN MENU</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:48.366" endtime="20200720 11:50:48.366"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:40.989" endtime="20200720 11:50:48.366"></status>
</kw>
<kw name="Send Clear" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:48.366" endtime="20200720 11:50:48.366"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>UDFL</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:48.366" endtime="20200720 11:50:48.366"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:48.366" endtime="20200720 11:50:48.787"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Company Number =====&gt;</arg>
<arg>&amp;{environment}[companynumber]</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:48.787" endtime="20200720 11:50:49.444"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>DB2 Test Pool ID ===&gt;</arg>
<arg>&amp;{environment}[pool]</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:49.444" endtime="20200720 11:50:51.195"></status>
</kw>
<kw name="Send Pf4" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:51.195" endtime="20200720 11:50:51.210"></status>
</kw>
<kw name="String Found" library="py3270lib">
<doc>String Found verifies the the specified string (exactly) is found at the specified location.</doc>
<arguments>
<arg>2</arg>
<arg>2</arg>
<arg>User defaults updated, new copy performed</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:51.210" endtime="20200720 11:50:51.210"></status>
</kw>
<kw name="Get out of TSO/CICSK/SAREGKT" library="SharedKeywordsSAN">
<kw name="Send Pf19" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:51.210" endtime="20200720 11:50:51.210"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:50:52.210" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:50:51.210" endtime="20200720 11:50:52.210"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:51.210" endtime="20200720 11:50:52.210"></status>
</kw>
<kw name="Log out of CICSK session" library="SharedKeywordsSAN">
<kw name="Send Pf" library="py3270lib">
<arguments>
<arg>24</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:52.210" endtime="20200720 11:50:52.210"></status>
</kw>
<kw name="Send Pf7" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:52.210" endtime="20200720 11:50:52.210"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Comando ===&gt;</arg>
<arg>FIND &amp;{environment}[cicsk]</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:52.210" endtime="20200720 11:50:54.837"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:54.837" endtime="20200720 11:50:55.247"></status>
</kw>
<kw name="Find Field" library="py3270lib">
<doc>:returns:  tuple consisting of row, column</doc>
<arguments>
<arg>&amp;{environment}[cicsk]</arg>
<arg>RIGHT</arg>
</arguments>
<msg timestamp="20200720 11:50:55.575" level="INFO">to_right_end=80</msg>
<status status="PASS" starttime="20200720 11:50:55.247" endtime="20200720 11:50:55.684"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>i</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:55.684" endtime="20200720 11:50:55.684"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:55.684" endtime="20200720 11:50:56.106"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:50:57.106" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:50:56.106" endtime="20200720 11:50:57.106"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:52.210" endtime="20200720 11:50:57.106"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:40.989" endtime="20200720 11:50:57.106"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:50:57.106"></status>
</kw>
<kw name="Go to CICSK updated" library="SharedKeywordsSAN">
<doc>Goes into cicks, handles logging in, uses keyword 'Log into CICKS'</doc>
<kw name="Select menu Option" library="SharedKeywordsSAN">
<doc>Selects given *${Option}* from main menu screen.</doc>
<arguments>
<arg>&amp;{environment}[cicsk]</arg>
</arguments>
<kw name="Send Pf" library="py3270lib">
<arguments>
<arg>24</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:57.106" endtime="20200720 11:50:57.106"></status>
</kw>
<kw name="Send Pf7" library="py3270lib">
<status status="PASS" starttime="20200720 11:50:57.106" endtime="20200720 11:50:57.106"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Comando ===&gt;</arg>
<arg>FIND ${Option}</arg>
</arguments>
<status status="PASS" starttime="20200720 11:50:57.106" endtime="20200720 11:50:59.731"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:50:59.731" endtime="20200720 11:51:00.154"></status>
</kw>
<kw name="Find Field" library="py3270lib">
<doc>:returns:  tuple consisting of row, column</doc>
<arguments>
<arg>${Option}</arg>
<arg>RIGHT</arg>
</arguments>
<msg timestamp="20200720 11:51:00.482" level="INFO">to_right_end=80</msg>
<status status="PASS" starttime="20200720 11:51:00.154" endtime="20200720 11:51:00.591"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>S</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:00.591" endtime="20200720 11:51:00.591"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:51:00.591" endtime="20200720 11:51:01.029"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 seconds</arg>
</arguments>
<msg timestamp="20200720 11:51:03.029" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20200720 11:51:01.029" endtime="20200720 11:51:03.029"></status>
</kw>
<kw name="Log Screen" library="py3270lib">
<doc>Log Screen adds an image of the current screen from the terminal emulator to the Robot
Framework test log.</doc>
<msg timestamp="20200720 11:51:03.029" level="INFO" html="yes">&lt;html&gt;
&lt;head&gt;
 &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;/head&gt;
 &lt;body&gt;
  &lt;table border=0&gt;&lt;tr bgcolor=black&gt;&lt;td&gt;&lt;pre&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt;&lt;/span&gt;&lt;span style="color:black;background:red;font-weight:normal;font-style:normal"&gt; &lt;/span&gt;&lt;span style="color:green;background:black;font-weight:normal;font-style:normal"&gt;                                                                               
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;/table&gt;
 &lt;/body&gt;
&lt;/html&gt;
</msg>
<status status="PASS" starttime="20200720 11:51:03.029" endtime="20200720 11:51:03.029"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:57.106" endtime="20200720 11:51:03.029"></status>
</kw>
<kw name="Credential Getter" library="user_password">
<arguments>
<arg>Cams user</arg>
</arguments>
<assign>
<var>${Cams user}</var>
</assign>
<msg timestamp="20200720 11:51:03.029" level="INFO">${Cams user} = &lt;user_password.user_password.credential_getter.&lt;locals&gt;._cred_getter object at 0x00000271F60ECD30&gt;</msg>
<status status="PASS" starttime="20200720 11:51:03.029" endtime="20200720 11:51:03.029"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:51:04.045" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:51:03.029" endtime="20200720 11:51:04.045"></status>
</kw>
<kw name="String Get" library="py3270lib">
<doc>String Get accepts the ypos and xpos of the string to retrieve.  Optionally, a fixed length 
may be specified or a termination string may be specified.  The default terminator is 2 spaces.
When a terminator is used, String Get will return all characters up until the terminator.</doc>
<arguments>
<arg>1</arg>
<arg>31</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${SingON}</var>
</assign>
<msg timestamp="20200720 11:51:04.045" level="INFO">${SingON} =             </msg>
<status status="PASS" starttime="20200720 11:51:04.045" endtime="20200720 11:51:04.045"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${SingON}</arg>
</arguments>
<msg timestamp="20200720 11:51:04.045" level="INFO">${SingON} =             </msg>
<status status="PASS" starttime="20200720 11:51:04.045" endtime="20200720 11:51:04.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SingON}' != 'CICS Sign On'</arg>
<arg>send clear</arg>
<arg>ELSE</arg>
<arg>Log into CICKS</arg>
</arguments>
<kw name="Send Clear" library="py3270lib">
<status status="PASS" starttime="20200720 11:51:04.045" endtime="20200720 11:51:04.045"></status>
</kw>
<status status="PASS" starttime="20200720 11:51:04.045" endtime="20200720 11:51:04.045"></status>
</kw>
<kw name="XCSR" library="SharedKeywordsSAN">
<kw name="Send Clear" library="py3270lib">
<status status="PASS" starttime="20200720 11:51:04.045" endtime="20200720 11:51:04.045"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>xcsr</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:04.045" endtime="20200720 11:51:04.045"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:51:04.045" endtime="20200720 11:51:04.467"></status>
</kw>
<status status="PASS" starttime="20200720 11:51:04.045" endtime="20200720 11:51:04.467"></status>
</kw>
<kw name="String Found" library="py3270lib">
<doc>String Found verifies the the specified string (exactly) is found at the specified location.</doc>
<arguments>
<arg>3</arg>
<arg>1</arg>
<arg>MAIN MENU</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:04.467" endtime="20200720 11:51:04.467"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:57.106" endtime="20200720 11:51:04.467"></status>
</kw>
<kw name="Test teardown" library="Set_Teardown" type="teardown">
<kw name="Get out of TSO/CICSK/SAREGKT" library="SharedKeywordsSAN">
<kw name="Send Pf19" library="py3270lib">
<status status="PASS" starttime="20200720 11:51:04.467" endtime="20200720 11:51:04.467"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:51:05.487" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:51:04.467" endtime="20200720 11:51:05.487"></status>
</kw>
<status status="PASS" starttime="20200720 11:51:04.467" endtime="20200720 11:51:05.487"></status>
</kw>
<kw name="Log out of TSO session" library="SharedKeywordsSAN">
<doc>Logs out of TSO session using *S5TSO* `Sessid`</doc>
<kw name="Send Pf" library="py3270lib">
<arguments>
<arg>24</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:05.487" endtime="20200720 11:51:05.487"></status>
</kw>
<kw name="Send Pf7" library="py3270lib">
<status status="PASS" starttime="20200720 11:51:05.487" endtime="20200720 11:51:05.487"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Comando ===&gt;</arg>
<arg>FIND S5TSO</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:05.487" endtime="20200720 11:51:08.112"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:51:08.112" endtime="20200720 11:51:08.534"></status>
</kw>
<kw name="Find Field" library="py3270lib">
<doc>:returns:  tuple consisting of row, column</doc>
<arguments>
<arg>S5TSO</arg>
<arg>RIGHT</arg>
</arguments>
<msg timestamp="20200720 11:51:08.862" level="INFO">to_right_end=80</msg>
<status status="PASS" starttime="20200720 11:51:08.534" endtime="20200720 11:51:08.972"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>i</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:08.972" endtime="20200720 11:51:08.972"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:51:08.972" endtime="20200720 11:51:09.393"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:51:10.395" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:51:09.393" endtime="20200720 11:51:10.395"></status>
</kw>
<status status="PASS" starttime="20200720 11:51:05.487" endtime="20200720 11:51:10.395"></status>
</kw>
<kw name="Log out of CICSK session" library="SharedKeywordsSAN">
<kw name="Send Pf" library="py3270lib">
<arguments>
<arg>24</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:10.395" endtime="20200720 11:51:10.395"></status>
</kw>
<kw name="Send Pf7" library="py3270lib">
<status status="PASS" starttime="20200720 11:51:10.395" endtime="20200720 11:51:10.395"></status>
</kw>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Comando ===&gt;</arg>
<arg>FIND &amp;{environment}[cicsk]</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:10.395" endtime="20200720 11:51:13.021"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:51:13.021" endtime="20200720 11:51:13.442"></status>
</kw>
<kw name="Find Field" library="py3270lib">
<doc>:returns:  tuple consisting of row, column</doc>
<arguments>
<arg>&amp;{environment}[cicsk]</arg>
<arg>RIGHT</arg>
</arguments>
<msg timestamp="20200720 11:51:13.770" level="INFO">to_right_end=80</msg>
<status status="PASS" starttime="20200720 11:51:13.442" endtime="20200720 11:51:13.880"></status>
</kw>
<kw name="Send String" library="py3270lib">
<doc>Send a string to the screen at the current cursor location or at
screen co-ordinates `ypos`/`xpos` if they are both given.
Co-ordinates are 1 based, as listed in the status area of the
terminal.</doc>
<arguments>
<arg>i</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:13.880" endtime="20200720 11:51:13.880"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:51:13.880" endtime="20200720 11:51:14.302"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20200720 11:51:15.302" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200720 11:51:14.302" endtime="20200720 11:51:15.302"></status>
</kw>
<status status="PASS" starttime="20200720 11:51:10.395" endtime="20200720 11:51:15.302"></status>
</kw>
<kw name="Log out of mainframe" library="SharedKeywordsSAN">
<doc>Logs out of mainframe.</doc>
<kw name="Fill Field By Label" library="py3270lib">
<arguments>
<arg>Comando ===&gt;</arg>
<arg>logoff</arg>
</arguments>
<status status="PASS" starttime="20200720 11:51:15.302" endtime="20200720 11:51:15.739"></status>
</kw>
<kw name="Send Enter" library="py3270lib">
<doc>Send Enter performs the equivalent of pressing Enter on the keyboard in a terminal emulator.
Send Enter additionally performs the equivalent of a human operator in that it notes the current
content of the screen and after pressing enter waits for a change in what is on the screen.</doc>
<status status="PASS" starttime="20200720 11:51:15.739" endtime="20200720 11:51:16.161"></status>
</kw>
<status status="PASS" starttime="20200720 11:51:15.302" endtime="20200720 11:51:16.161"></status>
</kw>
<status status="PASS" starttime="20200720 11:51:04.467" endtime="20200720 11:51:16.161"></status>
</kw>
<status status="PASS" starttime="20200720 11:50:17.429" endtime="20200720 11:51:16.161" critical="yes"></status>
</test>
<status status="PASS" starttime="20200720 11:50:16.429" endtime="20200720 11:51:16.161"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Mind Dump">Mind Dump</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20200720 11:50:17.304" level="ERROR">Error in file 'C:\RobotFramework\PyCharm\SAANA\Reissue\mind_dump.robot': Importing test library 'builtin' failed: ModuleNotFoundError: No module named 'builtin'
Traceback (most recent call last):
  None
PYTHONPATH:
  C:\Program Files\Python38\Scripts\robot.exe
  C:\RobotFramework\rf-libraries
  c:\program files\python38\python38.zip
  c:\program files\python38\DLLs
  c:\program files\python38\lib
  c:\program files\python38
  c:\program files\python38\lib\site-packages
  c:\program files\python38\lib\site-packages\win32
  c:\program files\python38\lib\site-packages\win32\lib
  c:\program files\python38\lib\site-packages\Pythonwin</msg>
<msg timestamp="20200720 11:50:17.335" level="ERROR">Error in file 'C:\RobotFramework\PyCharm\SAANA\SharedKeywordsSAN.robot': Importing test library 'builtin' failed: ModuleNotFoundError: No module named 'builtin'
Traceback (most recent call last):
  None
PYTHONPATH:
  C:\Program Files\Python38\Scripts\robot.exe
  C:\RobotFramework\rf-libraries
  c:\program files\python38\python38.zip
  c:\program files\python38\DLLs
  c:\program files\python38\lib
  c:\program files\python38
  c:\program files\python38\lib\site-packages
  c:\program files\python38\lib\site-packages\win32
  c:\program files\python38\lib\site-packages\win32\lib
  c:\program files\python38\lib\site-packages\Pythonwin</msg>
<msg timestamp="20200720 11:50:17.367" level="ERROR">Error in file 'C:\RobotFramework\PyCharm\SAANA\Environments1.robot': Importing test library 'builtin' failed: ModuleNotFoundError: No module named 'builtin'
Traceback (most recent call last):
  None
PYTHONPATH:
  C:\Program Files\Python38\Scripts\robot.exe
  C:\RobotFramework\rf-libraries
  c:\program files\python38\python38.zip
  c:\program files\python38\DLLs
  c:\program files\python38\lib
  c:\program files\python38
  c:\program files\python38\lib\site-packages
  c:\program files\python38\lib\site-packages\win32
  c:\program files\python38\lib\site-packages\win32\lib
  c:\program files\python38\lib\site-packages\Pythonwin</msg>
<msg timestamp="20200720 11:50:17.398" level="ERROR">Error in file 'C:\RobotFramework\PyCharm\SAANA\Reissue\Manual_Rei_Keywords.robot': Importing test library 'builtin' failed: ModuleNotFoundError: No module named 'builtin'
Traceback (most recent call last):
  None
PYTHONPATH:
  C:\Program Files\Python38\Scripts\robot.exe
  C:\RobotFramework\rf-libraries
  c:\program files\python38\python38.zip
  c:\program files\python38\DLLs
  c:\program files\python38\lib
  c:\program files\python38
  c:\program files\python38\lib\site-packages
  c:\program files\python38\lib\site-packages\win32
  c:\program files\python38\lib\site-packages\win32\lib
  c:\program files\python38\lib\site-packages\Pythonwin</msg>
<msg timestamp="20200720 11:50:17.413" level="ERROR">Error in file 'C:\RobotFramework\PyCharm\SAANA\Reissue\Manual_Rei_Keywords.robot': Resource file 'SharedKeywordsSAN.robot' does not exist.</msg>
<msg timestamp="20200720 11:50:18.460" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20200720 11:50:20.507" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20200720 11:50:22.523" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20200720 11:50:24.539" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20200720 11:50:26.556" level="WARN">[WinError 10061] No connection could be made because the target machine actively refused it</msg>
</errors>
</robot>
